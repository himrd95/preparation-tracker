// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  name      String?
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
  questions Question[]
  projects  Project[]
  designs   SystemDesign[]
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String?
  category  String
  status    String   // "To Do" | "In Progress" | "Done"
  expertise String   // "Beginner" | "Intermediate" | "Expert"
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  repoLink   String?
  liveLink   String?
  status     String   // "Planned" | "In Progress" | "Done"
  complexity String   // "Easy" | "Medium" | "Hard"
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SystemDesign {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  notes     String?
  status    String   // "To Do" | "In Progress" | "Done"
  expertise String   // "Beginner" | "Intermediate" | "Expert"
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

