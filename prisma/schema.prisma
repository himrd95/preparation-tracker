// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  questions Question[]
  projects Project[]
  systemDesigns SystemDesign[]
  roadmapTopics RoadmapTopic[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Question {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  link        String?
  status      QuestionStatus @default(TODO)
  expertise   ExpertiseLevel @default(BEGINNER)
  topic       String
  difficulty  DifficultyLevel @default(EASY)
  notes       String?
  solvedAt    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, title])
  @@map("questions")
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  repoLink    String?
  liveDemo    String?
  status      ProjectStatus @default(PLANNED)
  complexity  ComplexityLevel @default(BEGINNER)
  techStack   String[]
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, title])
  @@map("projects")
}

model SystemDesign {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  status      QuestionStatus @default(TODO)
  expertise   ExpertiseLevel @default(BEGINNER)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, title])
  @@map("systemdesigns")
}

model RoadmapTopic {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  status      RoadmapStatus @default(TODO)
  resources   Json? // Store resources as JSON array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("roadmaptopics")
}

enum QuestionStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ExpertiseLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

enum ComplexityLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum RoadmapStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}
